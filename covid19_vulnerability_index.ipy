#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import pandas as pd
import numpy as np
import warnings
import random
import regex as re
import json
from pkg_resources import resource_filename

"""
Created on Fri Mar 20 19:13:15 2020

@author: ozzycodes
"""

# %xmode Plain

warnings.filterwarnings('ignore')

"""
Import the cv19index module
"""
try:
    import cv19index
except ModuleNotFoundError:
    import sys

    sys.path.append("../")
    import cv19index

"""
INPUT FILES
"""
person_df = pd.read_csv('examples/data/person.csv')
eligibility_df = pd.read_csv('examples/data/eligibility.csv')
inpatient_df = pd.read_csv('examples/data/inpatient.csv')
outpatient_df = pd.read_csv('examples/data/outpatient.csv')

# Data contains info on 1,000 people (each with 0 claims)
"""print(person_df.shape, eligibility_df.shape,
      inpatient_df.shape, outpatient_df.shape)

print(person_df.head())
print(eligibility_df.head())
print(inpatient_df.head())
print(outpatient_df.head())"""

"""
DATA PREPARATION
"""


def cleanICD10Syntax(code):
    if len(code) > 3 and '.' not in code:
        return code[:3] + '.' + code[3:]
    else:
        return code


"""
1. Filters the inpatient and outpatient dataframe to have admits and claims
    within a year of the asOfDate passed.
2. Calculates Age
3. Formats the Dataframe for the input of the model
4. For all CCSR Codes :-
A. Finds all the ICD-10 codes for the CCSR mentioned.
B. Filter the inpatient and outpatient dataframe to have only those admits
    and claims which have the ICD10 codes
    for the CCSR within the year of asOfDate.
C. Map it back to the person
"""


# noinspection PyShadowingNames
def getTestDataFrame(person_df, eligibility_df, inpatient_df, outpatient_df,
                     asOfDate, diagnosis_columns):
    # Getting diagnosis within the past year of asOfDate
    asOfPastYear = str(pd.to_datetime(asOfDate) - pd.DateOffset(years=1))

    inpatient_df = inpatient_df[(asOfPastYear <= inpatient_df['admitDate'])
                                & (inpatient_df['admitDate'] <= asOfDate)]
    outpatient_df = outpatient_df[(asOfPastYear
                                   <= outpatient_df['serviceDate'])
                                  & (outpatient_df['serviceDate'] <= asOfDate)]
    inpatient_er_visit = inpatient_df[inpatient_df['edAdmit'] == True][['personId', 'admitDate']].groupby(
        'personId').admitDate.nunique().reset_index()
    outpatient_er_visit = outpatient_df[outpatient_df['edVisit'] == True][['personId', 'serviceDate']].groupby(
        'personId').serviceDate.nunique().reset_index()

    # Calculating Age, # of ER Visits, # of Admissions and Inpatient days
    person_df['Age'] = person_df['birthYear'].apply(
        lambda x: pd.to_datetime('now').year - pd.to_datetime(x).year)
    person_df = person_df.merge(
        inpatient_er_visit, how='left').merge(outpatient_er_visit, how='left')
    person_df['# of ER Visits (12M)'] = person_df['admitDate'] + person_df['serviceDate']
    inpatient_df['Inpatient Days'] = inpatient_df[['dischargeDate',
                                                   'admitDate']].apply(
        lambda x: (
                pd.to_datetime(
                    x.dischargeDate)
                - pd.to_datetime(
            x.admitDate)).days, axis=1)
    inpatient_er_days = inpatient_df[['personId', 'Inpatient Days']]
    person_df = person_df.merge(inpatient_er_days, how='left')
    person_df = person_df.fillna(0)

    person_df = person_df[[
        'personId', '# of ER Visits (12M)', 'gender', 'Age', 'admitDate',
        'Inpatient Days'
    ]]

    # Number of admissions is number of unique admit dates
    person_df = person_df.rename(columns={
        'gender': 'Gender',
        'admitDate': '# of Admissions (12M)'
    })

    # Cleaning the diagnosis codes
    for column in diagnosis_columns:
        inpatient_df[column] = inpatient_df[column].apply(
            lambda x: cleanICD10Syntax(str(x)))
        outpatient_df[column] = outpatient_df[column].apply(
            lambda x: cleanICD10Syntax(str(x)))

    nodes = pd.read_csv(resource_filename('cv19index',
                                          'resources/ccsrNodes.txt'))
    edges_df = pd.read_csv(resource_filename('cv19index',
                                             'resources/ccsrEdges.txt'))
    edges_df['code'] = edges_df['child'].apply(lambda x: x.split(':')[1])

    # Generating features for each node
    for CCSR, description in nodes.values:
        # getting the codes
        codes = edges_df[edges_df['parent'].str.contains(CCSR)]
        selected_inpatient = inpatient_df[inpatient_df.isin(
            codes['code'].values).any(axis=1)]['personId'].values
        selected_outpatient = outpatient_df[outpatient_df.isin(
            codes['code'].values).any(axis=1)]['personId'].values
        selected_personId = np.unique(np.concatenate((selected_inpatient,
                                                      selected_outpatient)))

        # Assigning the diagnosis flag to the person
        description = re.sub("[^\P{P}-/']+", "_", description.replace(")", ""))
        column_name = "Diagnosis of " + description + " in the previous 12 months"

        person_df[column_name] = person_df['personId'].apply(
            lambda x: True if x in selected_personId else False)

    # Getting the column order for the model
    f = open(resource_filename("cv19index",
                               "resources/xgboost/input.csv.schema.json"))
    column_order = [item['name'] for item in json.load(f)['schema']]
    f.close()

    # returning the needed features
    return person_df[column_order]


# Generate the resulting dataframe for input model
asOfDate = '2018-06-01'
diagnosis_columns = ['dx1', 'dx2', 'dx3', 'dx4', 'dx5',
                     'dx6', 'dx7', 'dx8', 'dx9', 'dx10',
                     'dx11', 'dx12', 'dx13', 'dx14', 'dx15', 'dxE1']

result = getTestDataFrame(person_df, eligibility_df, inpatient_df,
                          outpatient_df, asOfDate,
                          diagnosis_columns=diagnosis_columns)

result = result.reset_index().drop(columns=['index'])
print(result.head())

output_name = "examples/xgboost/example_input.csv"
result.to_csv(output_name, index=False, float_format="%f")
